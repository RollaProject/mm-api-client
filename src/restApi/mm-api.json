{
  "openapi": "3.0.0",
  "paths": {
    "/v1/marketmaker/overview": {
      "get": {
        "operationId": "MarketMakerController_getMarketMakerOverview",
        "summary": "Retrieves an overview of the market maker account.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the market maker overview",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MakerOverviewDto" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["marketmaker"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/marketmaker/supportedAssets": {
      "patch": {
        "operationId": "MarketMakerController_setMarketMakerAssets",
        "summary": "Sets the assets supported by the market maker",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportedUnderlyingAssetsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieved the market maker overview",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MakerOverviewDto" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["marketmaker"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/marketmaker/supportsCustomOptions": {
      "patch": {
        "operationId": "MarketMakerController_setSupportsCustomQuotes",
        "summary": "Sets whether custom options are supported by the market maker",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportsCustomOptionsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieved the market maker overview",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MakerOverviewDto" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["marketmaker"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/marketmaker/isActive": {
      "patch": {
        "operationId": "MarketMakerController_changeMarketMakerVisibility",
        "summary": "Controls whether the market maker will be asked to provide quotes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SetMakerActiveDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieved the market maker overview",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/MakerOverviewDto" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["marketmaker"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/assets": {
      "get": {
        "operationId": "AssetController_getAllAssets",
        "summary": "Retrieves a list of all supported assets and their price",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the price of a specific asset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/AssetDto" }
                }
              }
            }
          },
          "500": { "description": "Non-configured stablecoin asset" }
        },
        "tags": ["assets"]
      }
    },
    "/v1/prices": {
      "get": {
        "operationId": "PriceController_getAllPrices",
        "summary": "Gets prices of all assets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the price of a specific asset",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OraclePricesDto" }
              }
            }
          }
        },
        "tags": ["prices"]
      }
    },
    "/v1/gas": {
      "get": {
        "operationId": "GasController_getGasDetails",
        "summary": "Gets the latest gas details",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the latest gas details",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/GasDetailsDto" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1025000018": {
                    "value": {
                      "errorMessage": "Missing gas data",
                      "errorCode": "1025000018"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["gas"]
      }
    },
    "/v1/options/active": {
      "get": {
        "operationId": "OptionController_getAllActiveOptions",
        "summary": "Retrieves a list of all active options (non-expired)",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the latest option details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/OptionDto" }
                }
              }
            }
          }
        },
        "tags": ["options"]
      }
    },
    "/v1/options/{optionAddress}": {
      "get": {
        "operationId": "OptionMarketMakerController_getOption",
        "summary": "Retrieves an option's details by its on-chain address. This will only * return option details if the option with that address has been created on-chain.",
        "parameters": [
          {
            "name": "optionAddress",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved details of the option",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OptionDto" }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024040010": {
                    "value": {
                      "errorMessage": "An option with that address doesn't exist",
                      "errorCode": "1024040010"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["options"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/options/settlementPrices/{underlyingAssetAddress}": {
      "get": {
        "operationId": "OptionMarketMakerController_getPriceRegistryEvents",
        "summary": "returns price registry events from Chainlink oracle where the event took place at 8am UTC",
        "parameters": [
          {
            "name": "underlyingAssetAddress",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "fromUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "toUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved price registry events",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PriceStoredDto" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException #1": {
                    "description": "Max limit is 250",
                    "value": {
                      "errorMessage": ["Max limit is 250"],
                      "error": "Bad Request"
                    }
                  },
                  "BadRequestException #2": {
                    "description": "Limit must be greater than 0",
                    "value": {
                      "errorMessage": ["Limit must be greater than 0"],
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "Max limit is 250",
                  "properties": {
                    "errorMessage": {
                      "type": "object",
                      "example": ["Max limit is 250"]
                    },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["errorMessage", "error"]
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["options"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/quotes/active": {
      "get": {
        "operationId": "QuoteMarketMakerController_getMarketMakerActiveQuotes",
        "summary": "Retrieves a list of market maker's active quotes. Active means not filled, not cancelled and not expired.",
        "parameters": [
          {
            "name": "optionAddress",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "underlyingAddress",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "fromUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "toUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the market maker's active quotes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteWithMetaDataDto"
                  }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException #1": {
                    "description": "Max limit is 250",
                    "value": {
                      "errorMessage": ["Max limit is 250"],
                      "error": "Bad Request"
                    }
                  },
                  "BadRequestException #2": {
                    "description": "Limit must be greater than 0",
                    "value": {
                      "errorMessage": ["Limit must be greater than 0"],
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "Max limit is 250",
                  "properties": {
                    "errorMessage": {
                      "type": "object",
                      "example": ["Max limit is 250"]
                    },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["errorMessage", "error"]
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024040017": {
                    "value": {
                      "errorMessage": "Market Maker not found",
                      "errorCode": "1024040017"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "custom": [] }],
        "tags": ["quotes"]
      }
    },
    "/v1/quotes/indicative": {
      "get": {
        "operationId": "QuoteController_getIndicativeQuotes",
        "summary": "Get indicative quotes of assets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully fetched indicative quotes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/QuoteDto" }
                }
              }
            }
          }
        },
        "tags": ["quotes"]
      }
    },
    "/v1/quotes": {
      "post": {
        "operationId": "QuoteController_getQuote",
        "summary": "Request a quote from market makers",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/QuoteRequestDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully posted the quote",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuoteDto" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024000008": {
                    "value": {
                      "errorMessage": "Orders in that makerAsset are unsupported",
                      "errorCode": "1024000008"
                    }
                  },
                  "1024000012": {
                    "value": {
                      "errorMessage": "Order expiration timestamp must be at least 50 seconds in the future",
                      "errorCode": "1024000012"
                    }
                  },
                  "1024000013": {
                    "value": {
                      "errorMessage": "Can't get quotes for options that have less than 86400 seconds remaining",
                      "errorCode": "1024000013"
                    }
                  },
                  "1024000015": {
                    "value": {
                      "errorMessage": "Can't request less than 0 options",
                      "errorCode": "1024000015"
                    }
                  },
                  "1024000019": {
                    "value": {
                      "errorMessage": "Order expiration timestamp must be less than 660 seconds in the future",
                      "errorCode": "1024000019"
                    }
                  },
                  "1024000020": {
                    "value": {
                      "errorMessage": "Only the ChainlinkFixedTimeOracle can be used as an oracle (0xc213317D5844479fD9deD11dbcd4d5A005FCC3a1)",
                      "errorCode": "1024000020"
                    }
                  },
                  "1024000021": {
                    "value": {
                      "errorMessage": "Can only request options which expire at 8AM UTC",
                      "errorCode": "1024000021"
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Internal server error" }
        },
        "tags": ["quotes"]
      }
    },
    "/v1/quotes/temp": {
      "get": {
        "operationId": "MarketMakerQuoteController_function",
        "parameters": [],
        "responses": {
          "200": { "description": "" },
          "401": { "description": "Unauthorized" }
        },
        "tags": ["marketmaker"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/quotes/requests": {
      "get": {
        "operationId": "MarketMakerQuoteController_getQuoteRequests",
        "summary": "Retrieves the active quote requests that the authenticated market maker needs to respond to.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active quote requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketMakerQuoteRequestDto"
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "tags": ["marketmaker"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/quotes/responses": {
      "post": {
        "operationId": "MarketMakerQuoteController_postQuoteResponses",
        "summary": "Posts quote responses",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MarketMakerQuoteResponseDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "None of the quote responses were successfully submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteResponseReplyDto"
                  }
                }
              }
            }
          },
          "201": {
            "description": "One or more quote responses were successfully submitted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QuoteResponseReplyDto"
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" }
        },
        "tags": ["marketmaker"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/summary": {
      "get": {
        "operationId": "SummaryController_getYield",
        "summary": "Returns a summary including assets, options, indicative quotes, prices, gas and config details.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the summary of the Rolla Yield API",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SummaryDto" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1025000018": {
                    "value": {
                      "errorMessage": "Missing gas data",
                      "errorCode": "1025000018"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["summary"]
      }
    },
    "/v1/config": {
      "get": {
        "operationId": "YieldConfigController_getConfig",
        "summary": "Retrieves the configuration details of the network",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieved the configuration details of the network",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConfigDto" }
              }
            }
          }
        },
        "tags": ["config"]
      }
    },
    "/v1/config/internal": {
      "get": {
        "operationId": "YieldConfigController_getInternalConfig",
        "parameters": [],
        "responses": { "401": { "description": "Unauthorized" } },
        "tags": ["config"],
        "security": [{ "basic": [] }]
      }
    },
    "/v1/trades/market-maker": {
      "get": {
        "operationId": "TradeMarketMakerController_getMarketMakerTrades",
        "summary": "Retrieves a list of market maker's trades",
        "parameters": [
          {
            "name": "includeTradeTypes",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "optionAddress",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "underlyingAddress",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "fromUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "toUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the market maker's trades",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TradeDto" }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException #1": {
                    "description": "Max limit is 250",
                    "value": {
                      "errorMessage": ["Max limit is 250"],
                      "error": "Bad Request"
                    }
                  },
                  "BadRequestException #2": {
                    "description": "Limit must be greater than 0",
                    "value": {
                      "errorMessage": ["Limit must be greater than 0"],
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "Max limit is 250",
                  "properties": {
                    "errorMessage": {
                      "type": "object",
                      "example": ["Max limit is 250"]
                    },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["errorMessage", "error"]
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["trades"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/trades": {
      "get": {
        "operationId": "TradeController_getUserTrades",
        "summary": "Retrieves a list of a user's trades",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "includeTradeTypes",
            "required": false,
            "in": "query",
            "description": "Filter trades by trade type",
            "example": "taker",
            "schema": { "enum": ["maker", "taker", "all"], "type": "string" }
          },
          {
            "name": "optionAddress",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "underlyingAddress",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "fromUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "toUniqueEventId",
            "required": false,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": { "type": "number" }
          }
        ],
        "responses": {
          "200": {
            "description": "User trades",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TradeDto" }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024000011": {
                    "value": {
                      "errorMessage": "Can't exclude both maker and taker trades from the response",
                      "errorCode": "1024000011"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["trades"]
      }
    },
    "/v1/trades/recent": {
      "get": {
        "operationId": "TradeController_getRecentTrades",
        "summary": "Retrieves a list of recent trades",
        "parameters": [
          {
            "name": "underlyingAddress",
            "required": false,
            "in": "query",
            "schema": {}
          },
          {
            "name": "optionType",
            "required": false,
            "in": "query",
            "schema": { "enum": ["CALL", "PUT"], "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Recent trades",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TradeDto" }
                }
              }
            }
          }
        },
        "tags": ["trades"]
      }
    },
    "/v1/trades/{txHash}": {
      "get": {
        "operationId": "TradeController_getTrade",
        "summary": "Retrieves a trade with a given transaction hash",
        "parameters": [
          {
            "name": "txHash",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "trade object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/TradeDto" }
              }
            }
          }
        },
        "tags": ["trades"]
      }
    },
    "/v1/metatransaction": {
      "post": {
        "operationId": "MetaTransactionController_submitLastLookRequest",
        "summary": "Submit a meta transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignedMetaTransactionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully received a response from the market maker",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LastLookResponseDto" }
              }
            }
          },
          "500": { "description": "Internal server error" }
        },
        "tags": ["metatransaction"]
      }
    },
    "/v1/metatransaction/requests": {
      "get": {
        "operationId": "MetaTransactionMarketMakerController_getMetaTransactions",
        "summary": "Fetch pending meta transactions which should be responded to",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully received meta transactions requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SignedMetaTransactionDto"
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        },
        "tags": ["metatransaction"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/metatransaction/responses": {
      "post": {
        "operationId": "MetaTransactionMarketMakerController_postMetaTransactionResponses",
        "summary": "Batch respond to meta transaction requests",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LastLookResponseWithOrderSignatureDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully received responses to meta transaction responses. An array of responses - one for each each meta transaction response in the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostMetaTransactionResponseDto"
                  }
                }
              }
            }
          },
          "401": { "description": "Unauthorized" },
          "500": { "description": "Internal server error" }
        },
        "tags": ["metatransaction"],
        "security": [{ "custom": [] }]
      }
    },
    "/v1/positions/options": {
      "get": {
        "operationId": "PositionsController_getUserPositions",
        "summary": "Retrieves a market maker's positions",
        "parameters": [
          {
            "name": "optionAddress",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "underlyingAddress",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "fromOption",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "toOption",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved the market maker's option positions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TradeDto" }
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "BadRequestException #1": {
                    "description": "Max limit is 250",
                    "value": {
                      "errorMessage": ["Max limit is 250"],
                      "error": "Bad Request"
                    }
                  },
                  "BadRequestException #2": {
                    "description": "Limit must be greater than 0",
                    "value": {
                      "errorMessage": ["Limit must be greater than 0"],
                      "error": "Bad Request"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "description": "Max limit is 250",
                  "properties": {
                    "errorMessage": {
                      "type": "object",
                      "example": ["Max limit is 250"]
                    },
                    "error": { "type": "string", "example": "Bad Request" }
                  },
                  "required": ["errorMessage", "error"]
                }
              }
            },
            "description": ""
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponseDto" },
                "examples": {
                  "1024010016": {
                    "value": {
                      "errorMessage": "Address is not registered as a market maker",
                      "errorCode": "1024010016"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "custom": [] }],
        "tags": ["positions"]
      }
    },
    "/v1/stats/{key}": {
      "get": {
        "operationId": "RollaStatsController_getOptionStats",
        "summary": "Retrieves a list of stats entries for given key",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "the stored stats entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/StatsDto" }
                }
              }
            }
          }
        },
        "tags": ["stats"]
      }
    }
  },
  "info": {
    "title": "Rolla Yield API - Market Maker",
    "description": "Rolla Yield API provides a RESTful API for fetching assets, options and quotes",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    { "name": "assets", "description": "Asset Management" },
    { "name": "config", "description": "Config Management" },
    { "name": "gas", "description": "Gas Management" },
    { "name": "options", "description": "Options Management" },
    { "name": "prices", "description": "Prices Management" },
    { "name": "quotes", "description": "Quotes Management" },
    { "name": "summary", "description": "Summary Management" },
    { "name": "trades", "description": "Trades Management" }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "custom": { "type": "apiKey", "in": "header", "name": "Authorization" },
      "basic": { "type": "http", "scheme": "basic" }
    },
    "schemas": {
      "ErrorResponseDto": {
        "type": "object",
        "properties": {
          "errorMessage": { "type": "string", "description": "Error message" },
          "errorCode": { "type": "string", "description": "Code of the error" }
        },
        "required": ["errorMessage", "errorCode"]
      },
      "MakerBalanceDto": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the maker asset token",
            "example": "0x1B86e5322A589f065bD40F0114664Ca40D78164B"
          },
          "balance": {
            "type": "string",
            "description": "Balance in whole units. e.g. 1000000000000000000 for a token with 18 decimals means 1",
            "example": "588422227077524742017381"
          },
          "lastUpdated": {
            "format": "date-time",
            "type": "string",
            "description": "The time we last fetched the balance",
            "example": "2022-04-06T05:33:15.177Z"
          }
        },
        "required": ["tokenAddress", "balance", "lastUpdated"]
      },
      "MakerOverviewDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of your account",
            "example": "MM One"
          },
          "address": {
            "type": "string",
            "description": "Address of your account. Quotes must be signed from this address when providing",
            "example": "0x04D28e1A5d85334C452761FbeC005273878eD8C8"
          },
          "quoteProviderUrl": {
            "type": "string",
            "description": "The endpoint we can send quote requests to",
            "example": "http://yourendpoint.com/quote"
          },
          "lastLookUrl": {
            "type": "string",
            "description": "The endpoint we can send last look requests to",
            "example": "http://yourendpoint.com/lastlook"
          },
          "status": {
            "type": "string",
            "description": "Whether or not we are sending quotes to you. If inactive or suspended, you may have told us to turn quotes off or you had too many failures against your account from cancellations, respectively",
            "example": "INACTIVE",
            "enum": ["ACTIVE", "INACTIVE", "SUSPENDED"]
          },
          "supportsCustomOptions": {
            "type": "boolean",
            "description": "Whether or not you support custom options",
            "example": false
          },
          "makerCancelTime": {
            "type": "string",
            "description": "Cancellation timestamp on chain. Any quotes issued by you with a creationTimestamp less than this are invalid.",
            "example": "1648482399"
          },
          "balances": {
            "description": "Array of balances which conform to object schema below.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/MakerBalanceDto" }
          },
          "supportedAssets": {
            "description": "The addresses of tokens the market maker supports",
            "example": ["0x5b99171e5a31233aF41f7c6Efa5c406A2CfAba59"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": [
          "name",
          "address",
          "quoteProviderUrl",
          "lastLookUrl",
          "status",
          "supportsCustomOptions",
          "makerCancelTime",
          "balances",
          "supportedAssets"
        ]
      },
      "SupportedUnderlyingAssetsDto": {
        "type": "object",
        "properties": {
          "supportedAssets": {
            "description": "The addresses of tokens a market maker supports",
            "example": ["0x5b99171e5a31233aF41f7c6Efa5c406A2CfAba59"],
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["supportedAssets"]
      },
      "SupportsCustomOptionsDto": {
        "type": "object",
        "properties": {
          "supportsCustomOptions": {
            "type": "boolean",
            "description": "whether the maker supports custom options",
            "example": false
          }
        },
        "required": ["supportsCustomOptions"]
      },
      "SetMakerActiveDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "Whether the market maker is active",
            "example": true
          }
        },
        "required": ["isActive"]
      },
      "AssetDto": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The asset token address",
            "example": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
          },
          "name": {
            "type": "string",
            "description": "The name of the asset on chain (result of ERC20 name() method)",
            "example": "BTCB Token"
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the asset on chain (result of ERC20 symbol() method)",
            "example": "BTCB"
          },
          "assetName": {
            "type": "string",
            "description": "The name of the coin",
            "example": "Bitcoin"
          },
          "assetSymbol": {
            "type": "string",
            "description": "The symbol of the coin",
            "example": "BTC"
          },
          "decimals": {
            "type": "number",
            "description": "The number of erc20 decimals of the asset (result of ERC20 symbol() method)",
            "example": 18
          },
          "isStablecoin": {
            "type": "boolean",
            "description": "True if the asset is a stablecoin asset",
            "example": false
          },
          "wrappedAddress": {
            "type": "string",
            "description": "The address of the associated wrapped asset. If it's defined then this asset is a native token asset.",
            "example": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
          },
          "coinGeckoID": {
            "type": "string",
            "description": "The ID of the asset on coingecko",
            "example": "bitcoin"
          }
        },
        "required": [
          "tokenAddress",
          "name",
          "symbol",
          "assetName",
          "assetSymbol",
          "decimals",
          "isStablecoin"
        ]
      },
      "PricesDto": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "object",
            "additionalProperties": { "type": "string" }
          }
        },
        "required": ["prices"]
      },
      "OraclePricesDto": {
        "type": "object",
        "properties": {
          "oraclePrices": {
            "type": "object",
            "additionalProperties": { "$ref": "#/components/schemas/PricesDto" }
          }
        },
        "required": ["oraclePrices"]
      },
      "GasDetailsDto": {
        "type": "object",
        "properties": {
          "LastBlock": {
            "type": "string",
            "description": "",
            "example": "17873421"
          },
          "SafeGasPrice": {
            "type": "string",
            "description": "",
            "example": "5"
          },
          "ProposeGasPrice": {
            "type": "string",
            "description": "",
            "example": "5"
          },
          "FastGasPrice": {
            "type": "string",
            "description": "",
            "example": "7"
          },
          "UsdPrice": {
            "type": "string",
            "description": "",
            "example": "307.02"
          }
        },
        "required": [
          "LastBlock",
          "SafeGasPrice",
          "ProposeGasPrice",
          "FastGasPrice",
          "UsdPrice"
        ]
      },
      "OptionAttributesDto": {
        "type": "object",
        "properties": {
          "underlyingAsset": {
            "type": "string",
            "description": "The address of the underlying asset on chain. The symbol can be looked up using the assets endpoint.",
            "example": "0x8Dc38d323530D8FF7420152632fE23fB5F6eBfDe"
          },
          "oracle": {
            "type": "string",
            "description": "The address of the oracle on chain. This is used for settling the option post expiry",
            "example": "0x5551aB86F158606C06F81649831cdd09830698fA"
          },
          "strikePrice": {
            "type": "string",
            "description": "The strike price of the option. This is in whole units of the stablecoin currency.",
            "example": "50000000000000000000000"
          },
          "expiryTime": {
            "type": "string",
            "description": "The expiry time of the option as a unix timestamp in seconds.",
            "example": "1651194000"
          },
          "isCall": {
            "type": "boolean",
            "description": "Whether the option is a call or put.",
            "example": true
          }
        },
        "required": [
          "underlyingAsset",
          "oracle",
          "strikePrice",
          "expiryTime",
          "isCall"
        ]
      },
      "OptionDto": {
        "type": "object",
        "properties": {
          "optionAddress": {
            "type": "string",
            "description": "Unique option identifier. Address of option smart contract on chain",
            "example": "0xB8d42A81794Be0a3b6dC7E1C69303706C43C2796"
          },
          "collateralTokenId": {
            "type": "string",
            "description": "The ID of the CollateralToken associated with the option",
            "example": "2000000"
          },
          "optionAttributes": {
            "description": "Attributes of options. Each field in this object is defined below.",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "optionName": {
            "type": "string",
            "description": "Full name of the option token i.e. what the on-chain name function returns",
            "example": "ROLLA WETH 01-April-2038 10000.90001 Put"
          },
          "optionSymbol": {
            "type": "string",
            "description": "Symbol of the option token i.e. what the on-chain symbol function returns",
            "example": "ROLLA-WETH-01APR2038-10000.90001-P"
          }
        },
        "required": [
          "optionAddress",
          "collateralTokenId",
          "optionAttributes",
          "optionName",
          "optionSymbol"
        ]
      },
      "PriceStoredDto": {
        "type": "object",
        "properties": {
          "settlementValue": {
            "type": "string",
            "description": "Actual settlement value in the base unit of the asset",
            "example": "1111979800550000000000"
          },
          "expiryTimestamp": {
            "type": "string",
            "description": "The unix timestamp when the price expires",
            "example": "1648224094"
          },
          "uniqueEventId": {
            "type": "string",
            "description": "unique identifier",
            "example": "2b8c5c60b2b62187df87d54d518c4dad64f4fa0e73926428b30ca3bd668e22f4"
          }
        },
        "required": ["settlementValue", "expiryTimestamp", "uniqueEventId"]
      },
      "QuoteMetaDataDto": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "description": "The database time of when the quote was seen",
            "example": "2022-04-04T04:24:06.424Z"
          },
          "orderHash": {
            "type": "string",
            "description": "The hash of the order supplied (unique identifier)",
            "example": "0x7dbc89e917ee73c4a936dcdc6f9c6ec9b5757d2eec23ebf01c920bb63352f902"
          },
          "quoteRequestId": {
            "type": "string",
            "description": "A unique randomly generated ID which identifies the request to our quote service. This can be used to paginate through our API responses.",
            "example": "c9aa862b-291e-4cb9-8083-7eac027cc38f"
          },
          "optionAddress": {
            "type": "string",
            "description": "The address of the option that a quote was provided for",
            "example": "0x975010175BF09994281c986Db5fe896e9Fe4B9B6"
          }
        },
        "required": [
          "createdDate",
          "orderHash",
          "quoteRequestId",
          "optionAddress"
        ]
      },
      "QuoteDto": {
        "type": "object",
        "properties": {
          "orderExpirationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order expires. If the block timestamp is after this timestamp when the order is submitted to the chain by the taker, the order will fail.",
            "example": "1649071507"
          },
          "taker": {
            "type": "string",
            "description": "The address of the taker of the order (seller of options)",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "takingAmount": {
            "type": "string",
            "description": "The amount of options being sold in whole units - qTokens have 18 decimals",
            "example": "1000000000000000000"
          },
          "optionAttributes": {
            "description": "The attributes of the option to be sold adhering to struct format above",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "makerAsset": {
            "type": "string",
            "description": "The address of the asset that the option is being purchased with",
            "example": "0x1B86e5322A589f065bD40F0114664Ca40D78164B"
          },
          "orderCreationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order was created. This is used for the cancel all functionality. When the on chain cancellation timestamp of the maker is after the orderCreationTimestamp, the order will fail.",
            "example": "1649071446"
          },
          "maker": {
            "type": "string",
            "description": "The address of the maker of the order (signer of order, buyer of options)",
            "example": "0x04D28e1A5d85334C452761FbeC005273878eD8C8"
          },
          "makingAmount": {
            "type": "string",
            "description": "The amount of makerAsset being offered in exchange for takingAmount",
            "example": "1026947763643816000000"
          },
          "allowedSender": {
            "type": "string",
            "description": "The user who can submit the order to the chain. Zero address means anyone.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "whitelist": {
            "type": "string",
            "description": "If the OrderProtocol contract is being called by a contract address and not directly by an EOA, the contract used to call the order protocol must be in the whitelist specified. If the whitelist is the zero address, any contract is allowed. Note, this doesnt prevent transitive calls i.e. contract B can call contract A which is whitelisted in whitelist and the order would succeed.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "signature": {
            "type": "string",
            "description": "To generate a signature from an order, the EIP712 standard can be used along with a private key. This is verified by Rolla when you send us a quote response after we request one.",
            "example": "0xba66d503dc4947f1a7d5e7d532f8e366b3e8db452607ea55a0c44d5b85097d9d03b1a12ee9b1347fad1968eefdae2977b8d82c7bf6e35ea871f5d0440ba88efa1c"
          }
        },
        "required": [
          "orderExpirationTimestamp",
          "taker",
          "takingAmount",
          "optionAttributes",
          "makerAsset",
          "orderCreationTimestamp",
          "maker",
          "makingAmount",
          "allowedSender",
          "whitelist",
          "signature"
        ]
      },
      "QuoteWithMetaDataDto": {
        "type": "object",
        "properties": {
          "metaData": {
            "description": "Additional metadata",
            "allOf": [{ "$ref": "#/components/schemas/QuoteMetaDataDto" }]
          },
          "quote": {
            "description": "This is the quote object that was issued by you when we asked for a quote. This conforms to the order format previously covered.",
            "allOf": [{ "$ref": "#/components/schemas/QuoteDto" }]
          }
        },
        "required": ["metaData", "quote"]
      },
      "QuoteRequestDto": {
        "type": "object",
        "properties": {
          "orderExpirationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order expires. If the block timestamp is after this timestamp when the order is submitted to the chain by the taker, the order will fail.",
            "example": "1649071507"
          },
          "taker": {
            "type": "string",
            "description": "The address of the taker of the order (seller of options)",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "takingAmount": {
            "type": "string",
            "description": "The amount of options being sold in whole units - qTokens have 18 decimals",
            "example": "1000000000000000000"
          },
          "optionAttributes": {
            "description": "The attributes of the option to be sold adhering to struct format above",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "makerAsset": {
            "type": "string",
            "description": "The address of the asset that the option is being purchased with",
            "example": "0x1B86e5322A589f065bD40F0114664Ca40D78164B"
          }
        },
        "required": [
          "orderExpirationTimestamp",
          "taker",
          "takingAmount",
          "optionAttributes",
          "makerAsset"
        ]
      },
      "MarketMakerQuoteRequestDto": {
        "type": "object",
        "properties": {
          "orderExpirationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order expires. If the block timestamp is after this timestamp when the order is submitted to the chain by the taker, the order will fail.",
            "example": "1649071507"
          },
          "taker": {
            "type": "string",
            "description": "The address of the taker of the order (seller of options)",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "takingAmount": {
            "type": "string",
            "description": "The amount of options being sold in whole units - qTokens have 18 decimals",
            "example": "1000000000000000000"
          },
          "optionAttributes": {
            "description": "The attributes of the option to be sold adhering to struct format above",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "makerAsset": {
            "type": "string",
            "description": "The address of the asset that the option is being purchased with",
            "example": "0x1B86e5322A589f065bD40F0114664Ca40D78164B"
          },
          "allowedSender": {
            "type": "string",
            "description": "The user who can submit the order to the chain. Zero address means anyone.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "whitelist": {
            "type": "string",
            "description": "If the OrderProtocol contract is being called by a contract address and not directly by an EOA, the contract used to call the order protocol must be in the whitelist specified. If the whitelist is the zero address, any contract is allowed. Note, this doesnt prevent transitive calls i.e. contract B can call contract A which is whitelisted in whitelist and the order would succeed.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "quoteRequestId": {
            "type": "string",
            "description": "The unique id of this quote request",
            "example": "77a456e5-7c13-45fe-9dd1-0cd786b3e353"
          }
        },
        "required": [
          "orderExpirationTimestamp",
          "taker",
          "takingAmount",
          "optionAttributes",
          "makerAsset",
          "allowedSender",
          "whitelist",
          "quoteRequestId"
        ]
      },
      "MarketMakerQuoteResponseDto": {
        "type": "object",
        "properties": {
          "orderExpirationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order expires. If the block timestamp is after this timestamp when the order is submitted to the chain by the taker, the order will fail.",
            "example": "1649071507"
          },
          "taker": {
            "type": "string",
            "description": "The address of the taker of the order (seller of options)",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "takingAmount": {
            "type": "string",
            "description": "The amount of options being sold in whole units - qTokens have 18 decimals",
            "example": "1000000000000000000"
          },
          "optionAttributes": {
            "description": "The attributes of the option to be sold adhering to struct format above",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "makerAsset": {
            "type": "string",
            "description": "The address of the asset that the option is being purchased with",
            "example": "0x1B86e5322A589f065bD40F0114664Ca40D78164B"
          },
          "orderCreationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order was created. This is used for the cancel all functionality. When the on chain cancellation timestamp of the maker is after the orderCreationTimestamp, the order will fail.",
            "example": "1649071446"
          },
          "maker": {
            "type": "string",
            "description": "The address of the maker of the order (signer of order, buyer of options)",
            "example": "0x04D28e1A5d85334C452761FbeC005273878eD8C8"
          },
          "makingAmount": {
            "type": "string",
            "description": "The amount of makerAsset being offered in exchange for takingAmount",
            "example": "1026947763643816000000"
          },
          "allowedSender": {
            "type": "string",
            "description": "The user who can submit the order to the chain. Zero address means anyone.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "whitelist": {
            "type": "string",
            "description": "If the OrderProtocol contract is being called by a contract address and not directly by an EOA, the contract used to call the order protocol must be in the whitelist specified. If the whitelist is the zero address, any contract is allowed. Note, this doesnt prevent transitive calls i.e. contract B can call contract A which is whitelisted in whitelist and the order would succeed.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "signature": {
            "type": "string",
            "description": "To generate a signature from an order, the EIP712 standard can be used along with a private key. This is verified by Rolla when you send us a quote response after we request one.",
            "example": "0xba66d503dc4947f1a7d5e7d532f8e366b3e8db452607ea55a0c44d5b85097d9d03b1a12ee9b1347fad1968eefdae2977b8d82c7bf6e35ea871f5d0440ba88efa1c"
          },
          "quoteRequestId": {
            "type": "string",
            "description": "Associated quote request id",
            "example": "844e3987-931e-46d8-bc62-443804f17f3d"
          }
        },
        "required": [
          "orderExpirationTimestamp",
          "taker",
          "takingAmount",
          "optionAttributes",
          "makerAsset",
          "orderCreationTimestamp",
          "maker",
          "makingAmount",
          "allowedSender",
          "whitelist",
          "signature",
          "quoteRequestId"
        ]
      },
      "QuoteResponseReplyDto": {
        "type": "object",
        "properties": {
          "validity": {
            "type": "string",
            "description": "Quote response validity"
          },
          "quoteRequestId": {
            "type": "string",
            "description": "Associated quote request id",
            "example": "844e3987-931e-46d8-bc62-443804f17f3d"
          }
        },
        "required": ["validity", "quoteRequestId"]
      },
      "ActiveOptionDto": {
        "type": "object",
        "properties": {
          "optionAddress": {
            "type": "string",
            "description": "Unique option identifier. Address of option smart contract on chain",
            "example": "0xB8d42A81794Be0a3b6dC7E1C69303706C43C2796"
          },
          "collateralTokenId": {
            "type": "string",
            "description": "The ID of the CollateralToken associated with the option",
            "example": "2000000"
          },
          "optionAttributes": {
            "description": "Attributes of options. Each field in this object is defined below.",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "optionName": {
            "type": "string",
            "description": "Full name of the option token i.e. what the on-chain name function returns",
            "example": "ROLLA WETH 01-April-2038 10000.90001 Put"
          },
          "optionSymbol": {
            "type": "string",
            "description": "Symbol of the option token i.e. what the on-chain symbol function returns",
            "example": "ROLLA-WETH-01APR2038-10000.90001-P"
          },
          "isOptionCreatedOnChain": {
            "type": "boolean",
            "description": "Whether or not the option exists or not. This doesn't have to be true for a taker to get a quote and take the quote as if it doesn't exist the option will be created on the fly when the quote is taken on chain.",
            "example": true
          }
        },
        "required": [
          "optionAddress",
          "collateralTokenId",
          "optionAttributes",
          "optionName",
          "optionSymbol",
          "isOptionCreatedOnChain"
        ]
      },
      "FeesDto": {
        "type": "object",
        "properties": {
          "protocolFee": { "type": "string", "description": "Protocol fee" }
        },
        "required": ["protocolFee"]
      },
      "ContractAddressesDto": {
        "type": "object",
        "properties": {
          "CollateralToken": { "type": "string" },
          "QuantProtocolMultisig": { "type": "string" },
          "QuantWebMultisig": { "type": "string" },
          "AssetsRegistry": { "type": "string" },
          "OptionsFactory": { "type": "string" },
          "PriceRegistry": { "type": "string" },
          "OracleRegistry": { "type": "string" },
          "ChainlinkOracleManager": { "type": "string" },
          "ChainlinkFixedTimeOracleManager": { "type": "string" },
          "QuantCalculator": { "type": "string" },
          "Controller": { "type": "string" },
          "RollaOrderProtocol": { "type": "string" },
          "Whitelist": { "type": "string" },
          "OperateProxy": { "type": "string" },
          "RollaFaucet": { "type": "string" },
          "Multicall3": { "type": "string" }
        },
        "required": [
          "CollateralToken",
          "QuantProtocolMultisig",
          "QuantWebMultisig",
          "AssetsRegistry",
          "OptionsFactory",
          "PriceRegistry",
          "OracleRegistry",
          "ChainlinkOracleManager",
          "ChainlinkFixedTimeOracleManager",
          "QuantCalculator",
          "Controller",
          "RollaOrderProtocol",
          "Whitelist",
          "OperateProxy"
        ]
      },
      "ConfigDto": {
        "type": "object",
        "properties": {
          "contractAddresses": {
            "description": "List of contract addresses",
            "example": {
              "QuantProtocolMultisig": "0x43175993e186632431AFAe63eE0dcd9584e70f6e",
              "QuantWebMultisig": "0x91Aa6d393Bb06cD8B4Ac3FEa24D1Bf44aCb780ac",
              "AssetsRegistry": "0xd37D24c6a7E8D303724Bb1C532a22f16c1a7e850",
              "OracleRegistry": "0x603B0C9Cd960c495bd82E197882Ea833A50ef819",
              "PriceRegistry": "0x5299B53aBec02791ae45Ba19d1acBDd5305F5e80",
              "tokens": {
                "WETH": "0x5b99171e5a31233aF41f7c6Efa5c406A2CfAba59",
                "WBNB": "0x19872A2ACc7c183A4d9B95a4cFE9c81e6765557E",
                "WBTC": "0x8Dc38d323530D8FF7420152632fE23fB5F6eBfDe",
                "USDC": "0x29630dA8A60c1FE60F9F2801d2B8236CDA66c33A"
              },
              "StrikeAsset": "0x29630dA8A60c1FE60F9F2801d2B8236CDA66c33A",
              "ChainlinkOracleManager": "0x868743598fE796b1e42C302582c3e56a22444845",
              "ChainlinkFixedTimeOracleManager": "0xc213317D5844479fD9deD11dbcd4d5A005FCC3a1",
              "QToken": "0x5A9808b3cC55e9f30E26050388eac0386346db0F",
              "Controller": "0xF0Ad4a0601691c5a0645c7A014f1e8C1C82D4a5b",
              "OperateProxy": "0x8395BEa33559E547437AEbFE13cddB84f1196D42",
              "CollateralToken": "0xb8A8155A51045c9498BDF6AF862FEE07ADcdB90D",
              "OptionsFactory": "0x5889357be32999772Fe035afe527d5DC9228179E",
              "QuantCalculator": "0xb4732A94b84e7C7aBE4B60e1559F95AF15760e8B",
              "RollaOrderProtocol": "0x00868694d84A5F979f1199419A26863086F0BCb9",
              "Whitelist": "0x59195B0503b3bEa59dCA7AE8b480Eaed8d0DfcA9",
              "Multicall3": "0x8bDceBe916D2d449E792d4B2ED742BF908D727Ad",
              "RollaFaucet": "0x3ac227a1EedFee8fc40583795281aA75521dE50f",
              "TimelockController": "0x48Da4C0Fe3a010BeC5bcF94D3aaf350A37c8bDCa"
            },
            "allOf": [{ "$ref": "#/components/schemas/ContractAddressesDto" }]
          },
          "chainId": {
            "type": "number",
            "description": "Current chain id for the Rolla Yield API",
            "example": "97"
          },
          "supportedMakerAssets": {
            "description": "Only allow premiums to be paid in certain assets",
            "type": "array",
            "items": { "type": "string" }
          },
          "fees": {
            "description": "Option selling fees config",
            "example": { "protocolFee": "500" },
            "allOf": [{ "$ref": "#/components/schemas/FeesDto" }]
          }
        },
        "required": [
          "contractAddresses",
          "chainId",
          "supportedMakerAssets",
          "fees"
        ]
      },
      "SummaryDto": {
        "type": "object",
        "properties": {
          "assets": {
            "description": "Assets summary",
            "type": "array",
            "items": { "$ref": "#/components/schemas/AssetDto" }
          },
          "options": {
            "description": "Options summary",
            "type": "array",
            "items": { "$ref": "#/components/schemas/ActiveOptionDto" }
          },
          "quotes": {
            "description": "Quotes summary",
            "type": "array",
            "items": { "$ref": "#/components/schemas/QuoteDto" }
          },
          "prices": {
            "description": "Prices summary",
            "allOf": [{ "$ref": "#/components/schemas/OraclePricesDto" }]
          },
          "gas": {
            "description": "Gas summary",
            "allOf": [{ "$ref": "#/components/schemas/GasDetailsDto" }]
          },
          "config": {
            "description": "Config summary",
            "allOf": [{ "$ref": "#/components/schemas/ConfigDto" }]
          }
        },
        "required": ["assets", "options", "quotes", "prices", "gas", "config"]
      },
      "TradeDto": {
        "type": "object",
        "properties": {
          "optionAddress": {
            "type": "string",
            "description": "The address of the option token",
            "example": "0x5203C0927e570cb076C09E0635414dD0f39BFC00"
          },
          "collateralTokenId": {
            "type": "string",
            "description": "The collateral token id associated with the option token",
            "example": "64883642623504720252194396183717573209957467881252361129530573621008232770613"
          },
          "optionAttributes": {
            "description": "The attributes of the option that was traded. This conforms to the same format as the optionAttributes field on the get active options endpoint.",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "makerAmount": {
            "type": "string",
            "description": "The amount that was traded by the maker (premium). In partial fill scenarios (rare since UI doesnt support that) this will be different from the amount quoted. In normal fill scenarios this will be the amount quoted by the maker.",
            "example": "48546239208860360000"
          },
          "takerAmount": {
            "type": "string",
            "description": "The amount of options the taker sold. In partial fill scenarios (rare since UI doesnt support that) this will be different from the taker amount from the quote. In normal fill scenarios this will be the same taker amount as the quote.",
            "example": "1000000000000000000"
          },
          "takerPayout": {
            "type": "string",
            "description": "The amount the taker got for the trade. This will be the makerAmount after fees.",
            "example": "46118927248417342000"
          },
          "underlyingPriceWhenFilled": {
            "type": "string",
            "description": "The underlying price from the oracle when the trade executed",
            "example": "3124665802940000000000"
          },
          "makerAddress": {
            "type": "string",
            "description": "The address of the maker",
            "example": "0x04D28e1A5d85334C452761FbeC005273878eD8C8"
          },
          "makerAsset": {
            "type": "string",
            "description": "The premium asset paid by the maker",
            "example": "0x1B86e5322A589f065bD40F0114664Ca40D78164B"
          },
          "takerAddress": {
            "type": "string",
            "description": "The address of the taker",
            "example": "0xabdC05433FF3EF12c06A57e3b36ff1B2252e2E91"
          },
          "transactionTime": {
            "type": "string",
            "description": "The unix timestamp when the transaction took place",
            "example": "1648224094"
          },
          "transactionHash": {
            "type": "string",
            "description": "The hash of the transaction",
            "example": "0x2b141ae3cc9940ce129a01f9a28974d53dff4c6c9fee0bb2932375926992f467"
          },
          "optionSymbol": {
            "type": "string",
            "description": "The option symbol",
            "example": "ROLLA-WBNB-06AUG2022-326-C"
          },
          "settlementPrice": {
            "type": "string",
            "description": "The settlement price of the option (if it has settled)",
            "example": null,
            "nullable": true
          },
          "impliedVolatility": {
            "type": "number",
            "description": "Implied volatility of the option (%)",
            "example": 12,
            "nullable": true
          }
        },
        "required": [
          "optionAddress",
          "collateralTokenId",
          "optionAttributes",
          "makerAmount",
          "takerAmount",
          "takerPayout",
          "underlyingPriceWhenFilled",
          "makerAddress",
          "makerAsset",
          "takerAddress",
          "transactionTime",
          "transactionHash",
          "optionSymbol",
          "settlementPrice",
          "impliedVolatility"
        ]
      },
      "UnsignedQuoteDto": {
        "type": "object",
        "properties": {
          "orderExpirationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order expires. If the block timestamp is after this timestamp when the order is submitted to the chain by the taker, the order will fail.",
            "example": "1649071507"
          },
          "taker": {
            "type": "string",
            "description": "The address of the taker of the order (seller of options)",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "takingAmount": {
            "type": "string",
            "description": "The amount of options being sold in whole units - qTokens have 18 decimals",
            "example": "1000000000000000000"
          },
          "optionAttributes": {
            "description": "The attributes of the option to be sold adhering to struct format above",
            "allOf": [{ "$ref": "#/components/schemas/OptionAttributesDto" }]
          },
          "makerAsset": {
            "type": "string",
            "description": "The address of the asset that the option is being purchased with",
            "example": "0x1B86e5322A589f065bD40F0114664Ca40D78164B"
          },
          "orderCreationTimestamp": {
            "type": "string",
            "description": "The timestamp when the order was created. This is used for the cancel all functionality. When the on chain cancellation timestamp of the maker is after the orderCreationTimestamp, the order will fail.",
            "example": "1649071446"
          },
          "maker": {
            "type": "string",
            "description": "The address of the maker of the order (signer of order, buyer of options)",
            "example": "0x04D28e1A5d85334C452761FbeC005273878eD8C8"
          },
          "makingAmount": {
            "type": "string",
            "description": "The amount of makerAsset being offered in exchange for takingAmount",
            "example": "1026947763643816000000"
          },
          "allowedSender": {
            "type": "string",
            "description": "The user who can submit the order to the chain. Zero address means anyone.",
            "example": "0x0000000000000000000000000000000000000000"
          },
          "whitelist": {
            "type": "string",
            "description": "If the OrderProtocol contract is being called by a contract address and not directly by an EOA, the contract used to call the order protocol must be in the whitelist specified. If the whitelist is the zero address, any contract is allowed. Note, this doesnt prevent transitive calls i.e. contract B can call contract A which is whitelisted in whitelist and the order would succeed.",
            "example": "0x0000000000000000000000000000000000000000"
          }
        },
        "required": [
          "orderExpirationTimestamp",
          "taker",
          "takingAmount",
          "optionAttributes",
          "makerAsset",
          "orderCreationTimestamp",
          "maker",
          "makingAmount",
          "allowedSender",
          "whitelist"
        ]
      },
      "OrderTrackingDto": {
        "type": "object",
        "properties": {
          "integrator": {
            "type": "string",
            "description": "Integrator Address",
            "example": "0x974d7b7A72AE7BF1Ee2D7BdfA60FD51f1fc7702d"
          },
          "integratorPercentage": {
            "type": "string",
            "description": "Integrator commission percentage which will be sent to the integrator for referring the transaction",
            "example": "500"
          },
          "orderTag": {
            "type": "string",
            "description": "An optional tracking parameter for applications",
            "example": "0x0000000000000000000000000000000000000000000000000000000000000000"
          }
        },
        "required": ["integrator", "integratorPercentage", "orderTag"]
      },
      "MetaTransactionDto": {
        "type": "object",
        "properties": {
          "functionType": {
            "type": "number",
            "description": "The function identifier to call in the ROP meta transaction. 0 = fill",
            "example": 0
          },
          "nonce": {
            "type": "number",
            "description": "Nonce of the meta transaction. This can be fetched by calling the nonce() method on the ROP contract",
            "example": 0
          },
          "deadline": {
            "type": "string",
            "description": "The unix timestamp (seconds) of when the meta transaction should become invalid",
            "example": "1657687880"
          },
          "from": {
            "type": "string",
            "description": "The from address of the meta transaction",
            "example": "0x1103ddf9398151e22c22c25866c1e24a71a1fae4"
          },
          "order": {
            "description": "An optional tracking parameter for applications",
            "allOf": [{ "$ref": "#/components/schemas/UnsignedQuoteDto" }]
          },
          "signature": {
            "type": "string",
            "description": "Signature of the order",
            "example": "0x0000000000ee2848baf402a492bdfa3d596e00c170521cc6192b93864200c09c1a8488d1847e557b376d9c03325825cccf626c453d70c544055a57662f4ff2fc1c"
          },
          "makingAmount": {
            "type": "string",
            "description": "Making amount to transact (either this is provided or takingAmount, other should be 0)",
            "example": "3000000"
          },
          "takingAmount": {
            "type": "string",
            "description": "Taking amount to transact (either this is provided or makingAmount, other should be 0)",
            "example": "0"
          },
          "permit": {
            "type": "string",
            "description": "Permit signature if an approval will be done with the meta transaction",
            "example": "0x00"
          },
          "orderTracking": {
            "description": "Order tracking object",
            "allOf": [{ "$ref": "#/components/schemas/OrderTrackingDto" }]
          }
        },
        "required": [
          "functionType",
          "nonce",
          "deadline",
          "from",
          "order",
          "signature",
          "makingAmount",
          "takingAmount",
          "permit",
          "orderTracking"
        ]
      },
      "SignedMetaTransactionDto": {
        "type": "object",
        "properties": {
          "metaTransaction": {
            "description": "Meta transaction to submit",
            "allOf": [{ "$ref": "#/components/schemas/MetaTransactionDto" }]
          },
          "signature": {
            "type": "string",
            "description": "Signature of meta transaction",
            "example": "0x00000000005dfa902717946b4b4482bebd8a66073a53219e5b129b83b5d1cffa20ab5421bb07f2b0695127e1086165fa35e362c5b4b10b8c996e082f9ef46b481b"
          }
        },
        "required": ["metaTransaction", "signature"]
      },
      "LastLookResponseDto": {
        "type": "object",
        "properties": {
          "transactionHash": {
            "type": "string",
            "description": "Blockchain transaction hash if accepted",
            "example": "0xb004294ba8f8a472c52348e3227980ef6d828c53f4935ee1f2b8547ba879fe46",
            "nullable": true
          },
          "marketMakerAction": {
            "type": "string",
            "description": "Market Maker Action",
            "example": "ACCEPTED"
          }
        },
        "required": ["transactionHash", "marketMakerAction"]
      },
      "LastLookResponseWithOrderSignatureDto": {
        "type": "object",
        "properties": {
          "transactionHash": {
            "type": "string",
            "description": "Blockchain transaction hash if accepted",
            "example": "0xb004294ba8f8a472c52348e3227980ef6d828c53f4935ee1f2b8547ba879fe46",
            "nullable": true
          },
          "marketMakerAction": {
            "type": "string",
            "description": "Market Maker Action",
            "example": "ACCEPTED"
          },
          "orderSignature": {
            "type": "string",
            "description": "order signature"
          }
        },
        "required": ["transactionHash", "marketMakerAction", "orderSignature"]
      },
      "PostMetaTransactionResponseDto": {
        "type": "object",
        "properties": {
          "orderSignature": { "type": "string" },
          "status": {
            "type": "string",
            "description": "responses to meta transaction requests",
            "enum": [
              "SUCCESS",
              "META_TRANSACTION_DOESNT_EXIST",
              "INCORRECT_MAKER",
              "ALREADY_RESPONDED_TO_TRANSACTION",
              "OTHER_FAILURE",
              "RESPONSE_WINDOW_EXPIRED"
            ]
          }
        },
        "required": ["orderSignature", "status"]
      },
      "StatsDto": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "entry timestamp",
            "example": "1648224094"
          },
          "data": {
            "type": "string",
            "description": "the key of the stats entry"
          },
          "key": {
            "type": "string",
            "description": "the stats data associated with the key"
          }
        },
        "required": ["timestamp", "data", "key"]
      }
    }
  },
  "externalDocs": {
    "description": "Swagger JSON file",
    "url": "/mm-api-docs-json"
  }
}
